import React, { useState, useEffect } from 'react'
import { Loader, Card, FormField } from '../components'

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map(post => <Card key={post._id} {...post} />)
  }
  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-lg uppercase">{ title }</h2>
  )
}

const Home = () => {
  const [loading, setLoading] = useState(false)
  const [allPosts, setAllPosts] = useState(null)
  const [searchText, setSearchText] = useState('')
  const [searchedResults, setSearchedResults] = useState(null)
  const [searchTimeout, setSearchTimeout] = useState(null)

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true)
      try {
        const response = await fetch('https://dalle-ai-backend.up.railway.app/api/v1/post', {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        })

        if (response.ok) {
          const result = await response.json()
          setAllPosts(result.data.reverse())
        }
      } catch (error) {
        alert(error)
      } finally {
        setLoading(false)
      }
    }

    fetchPosts()
  }, [])

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout)
    setSearchText(e.target.value)

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || 
        item.prompt.toLowerCase().includes(searchText.toLowerCase()))
  
        setSearchedResults(searchResults)
      }, 500)
    )
  }

  return (
    <section className="xl:max-w-6xl mx-auto duration-100">
      <div>
        <h1 className="font-extrabold text-[#222328] dark:text-white text-[32px]">The Community Showcase</h1>
        <p className="mt-2 text-[#666e75] dark:text-[#9aa0a5] text-[14px] max-w-[480px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
      </div>

      <div className="mt-14">
        <FormField autoFocus autoComplete="off" handleChange={handleSearchChange} labelName="Search posts" type="text" name="text" placeholder="Search posts" value={searchText} />
      </div>

      <div className="mt-8">
        { loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            { searchText && (
              <h2 className="text-[#666e75] dark:text-[#9aa0a5] text-lg mb-3">
                Showing results for <span className="text-[#222328] dark:text-white font-bold">{ searchText }</span>
              </h2>
            ) }

            <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3">
              { searchText ? (
                <RenderCards data={ searchedResults } title={'No search results found'} />
              ) : (
                <RenderCards data={ allPosts } title={'No posts found'} />
              ) }
            </div>
          </>
        ) }
      </div>
    </section>
  )
}

export default Home